@using Naif.Blog.Models
@using Naif.Core.Collections

@inherits ListComponentBase

@{
    foreach (var post in _posts)
    {
        <section>
            @ExcerptFragment(post)
            @Separator
        </section>
    }
}

<Pager Pages="@_pages"></Pager>

@code {

    private Naif.Core.Models.Pager _pages;

    private IPagedList<Post> _posts;

    [Parameter]
    public string BaseUrl { get; set; }

    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public int PageCount { get; set; } = 10;
    
    [Parameter]
    public int PageIndex { get; set; }

    [Parameter]
    public RenderFragment<Post> ExcerptFragment { get; set; } = (post) =>
    {
        var link = $"/post/{post.Slug}";

        return @<article class="excerpt">
                   <header>
                       <h3><a href="@link">@post.Title</a></h3>
                   </header>
                   <section>
                       @((MarkupString) post.Excerpt)
                   </section>
               </article>;
    };

    [Parameter]
    public RenderFragment Separator { get; set; } = @<hr>;

    protected override async Task OnParametersSetAsync()
    {
        _posts = Posts.InPagesOf(PageCount).GetPage(PageIndex);
            
        await Task.Run(() =>
        {
            var routeValues = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(Filter))
            {
                BaseUrl += $"/filter/{Filter}";
            }
            
            _pages = new Naif.Core.Models.Pager
            {
                BaseUrl = BaseUrl,
                CssClass = "pagination",
                HasNextPage = _posts.HasNextPage,
                HasPreviousPage = _posts.HasPreviousPage,
                NextCssClass = "right",
                NextText = "Next",
                PageCount = _posts.PageCount,
                PageIndex = _posts.PageIndex,
                PreviousCssClass = "left",
                PreviousText = "Previous",
                RouteValues = routeValues
            };
        });
    }
}