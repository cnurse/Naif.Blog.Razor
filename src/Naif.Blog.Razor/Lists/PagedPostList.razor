@using Naif.Blog.Models
@using Naif.Core.Collections

@inherits ListComponentBase

@{
    if (Mode == ListMode.List)
    {
        foreach (var post in _posts)
        {
            var editUrl = $"{BaseUrl}/{post.PostId}?returnUrl={ReturnUrl}";

            <section>
                @ExcerptFragment(new Tuple<Post, string>(post, editUrl))
                @Separator
            </section>
        }
    }
    else
    {
        int index = PageIndex * PageCount + 1;
        <table class="table">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Title</th>
            </tr>
            </thead>
            <tbody>
            @foreach(var post in Posts)
            {
                var editUrl = $"{BaseUrl}/{PageIndex}/edit/{post.PostId}";
                <tr>
                    <th scope="row">@index</th>
                    <td><a href="@editUrl">@post.Title</a></td>
                </tr>

                index++;
            }
            </tbody>
        </table>
    }
}

<Pager Pages="@_pages"></Pager>

@code {

    private Naif.Core.Models.Pager _pages;

    private IPagedList<Post> _posts;

    [Parameter]
    public string BaseUrl { get; set; }

    [Parameter]
    public RenderFragment<Tuple<Post, string>> ExcerptFragment { get; set; } = (t) =>
    {
        var post = t.Item1;
        var editUrl = t.Item2;
		
        var link = $"/post/{post.Slug}";

        return @<article class="excerpt">
                   <header>
                       <div class="row">
                           <div class="col-lg-11">
                               <h3><a href="@link">@post.Title</a></h3>
                           </div>
                           <div class="col-lg-1">
                               <h3><a class="link" href="@editUrl"><i class="bi bi-pencil"></i></a></h3>
                           </div>
                       </div>
                   </header>
                   <section>
                       @((MarkupString) post.Excerpt)
                   </section>
               </article>;
    };

    [Parameter]
    public string Filter { get; set; }

    [Parameter]
    public ListMode Mode { get; set; } = ListMode.List;

    [Parameter]
    public int PageCount { get; set; } = 10;
    
    [Parameter]
    public int PageIndex { get; set; }
    
    [Parameter]
    public string ReturnUrl { get; set; }

    [Parameter]
    public RenderFragment Separator { get; set; } = @<hr>;

    protected override async Task OnParametersSetAsync()
    {
        _posts = Posts.InPagesOf(PageCount).GetPage(PageIndex);
            
        await Task.Run(() =>
        {
            var routeValues = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(Filter))
            {
                BaseUrl += $"/filter/{Filter}";
            }
            
            _pages = new Naif.Core.Models.Pager
            {
                BaseUrl = BaseUrl,
                CssClass = "pagination",
                HasNextPage = _posts.HasNextPage,
                HasPreviousPage = _posts.HasPreviousPage,
                NextCssClass = "right",
                NextText = "Next",
                PageCount = _posts.PageCount,
                PageIndex = _posts.PageIndex,
                PreviousCssClass = "left",
                PreviousText = "Previous",
                RouteValues = routeValues
            };
        });
    }
}