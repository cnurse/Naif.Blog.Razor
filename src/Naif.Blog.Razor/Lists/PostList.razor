@using Naif.Blog.Models
@using Naif.Core.Constants
@using Naif.Core.Framework
@using Naif.Core.Models

@inherits ListComponentBase

@{
	foreach (var post in Posts)
	{
		var editUrl = $"{EditUrl}/{post.PostId}?returnUrl={ReturnUrl}";
		var deleteUrl = $"{DeleteUrl}/{post.PostId}?returnUrl={ReturnUrl}";
		
		<section>
            @ExcerptFragment(new Tuple<Post, string, string>(post, editUrl, deleteUrl))
            @Separator
		</section>
	}
}

@code {
	     
	private static User _user;
	
	[Parameter]
	public RenderFragment<Tuple<Post, string, string>> ExcerptFragment { get; set; } = (t) =>
	{
		var post = t.Item1;
		var editUrl = t.Item2;
		var deleteUrl = t.Item3;
		var modalId = $"deleteConfirmModal-{post.PostId}";
		
		var link = $"/post/{post.Slug}";

		return @<article class="excerpt">
			       <header>
				       <div class="row">
					       @if (_user.IsInRole(RoleNames.Admin))
					       {
						       <div class="col-lg-10">
							       <h3><a href="@link">@post.Title</a></h3>
						       </div>
						       <div class="col-lg-2">
							       <h3>
								       <a class="link" href="@editUrl"><i class="bi bi-pencil"></i></a>
								       <a class="link" href="#" data-bs-toggle="modal" data-bs-target="#@modalId"><i class="bi bi-trash"></i></a>
							       </h3>
							       <ConfirmModal Name="@modalId"
							                     Title="Delete Post?"
							                     Text="This action is irreversible. Are you sure you want to delete this post?"
							                     CloseText="Close"
							                     ConfirmText="Confirm Delete"
							                     Url="@deleteUrl"></ConfirmModal>
						       </div>
					       }
					       else
					       {
						       <div class="col-lg-12">
							       <h3><a href="@link">@post.Title</a></h3>
						       </div>
					       }
				       </div>

			       </header>
			       <section>
				       <p>@((MarkupString) post.Excerpt)</p>
			       </section>
		       </article>;
	};

	[Parameter]
	public RenderFragment Separator { get; set; } = @<hr>;
	
	[Parameter]
	public string DeleteUrl { get; set; }

	[Parameter]
	public string EditUrl { get; set; }
	
	[Parameter]
	public string ReturnUrl { get; set; }
	
	protected override async Task OnParametersSetAsync()
	{
		await Task.Run(() =>
		{
			_user = PageState.User;
		});
	}
}