@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@{
    if (_user.Identity.IsAuthenticated)
    {
        <ul class="@CssClass">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false">@_user.Identity.Name</a>
                <ul class="@SubMenuCssClass">
                    @if (IncludeProfilePicture && !String.IsNullOrEmpty(_imageUrl))
                    {
                        <li>
                            <img class="profileImage" src="@_imageUrl"/>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                    }
                    <li>
                        <a class="dropdown-item" href="#">Preferences</a>
                    </li>
                    @if (_user.IsInRole("Admin"))
                    {
                        <li>
                            <a class="dropdown-item" href="profile/claims">Claims (Admin only)</a>
                        </li>
                    }
                    <li>
                        <a class="dropdown-item" href="#">My Account</a>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    <li>
                        <a class="dropdown-item" href="account/logout">Log Out</a>
                    </li>
                </ul>
            </li>
        </ul>
    }
    else
    {
        {
            <span>Not Logged In</span>
        }
    }
}


@code {
    private ClaimsPrincipal _user;
    private string _imageUrl;

    [Parameter]
    public string CssClass { get; set; }
    
    [Parameter]
    public bool IncludeProfilePicture { get; set; }

    [Parameter]
    public string SubMenuCssClass { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        _imageUrl = _user.Claims.FirstOrDefault(c => c.Type == "picture")?.Value;
    }
}