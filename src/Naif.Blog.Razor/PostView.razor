@using Naif.Blog.Models
@using Naif.Core.Constants
@using Naif.Core.Framework
@using Naif.Core.Models

@inherits Naif.Blog.Razor.Framework.NaifComponentBase

@{
    var _cssClass = (Post.PostType == PostType.Post) ? "post" : "page";
    var _confirmText =$"This action is irreversible. Are you sure you want to delete this {((Post.PostType == PostType.Post) ? "post" : "page")}?";
    var _DeleteText = $"Delete {((Post.PostType == PostType.Post) ? "Post" : "Page")}";
}


<article class="@_cssClass">
    <header>
        <div class="row">
            @if (_user != null && _user.IsInRole(RoleNames.Admin))
            {
                <div class="col-lg-10">
                    <h1>@Post.Title</h1>
                </div>
                <div class="col-lg-2">
                    <h2>
                        <a class="link" href="@EditUrl"><i class="bi bi-pencil"></i></a>
                        <a class="link" href="#" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"><i class="bi bi-trash"></i></a>
                    </h2>
                    <ConfirmModal Name="deleteConfirmModal"
                                  Title="@_DeleteText"
                                  Text="@_confirmText"
                                  CloseText="Close"
                                  ConfirmText="Confirm Delete"
                                  Url="@DeleteUrl"></ConfirmModal>
                </div>
            }
            else
            {
                <div class="col-lg-12">
                    <h1>@Post.Title</h1>
                </div>
            }
        </div>
        @{
            if (!string.IsNullOrEmpty(Post.SubTitle))
            {
                <h2>@Post.SubTitle</h2>
            }
        }
        @if(Post.PostType == PostType.Post)
        {
            <div>
                Category:
                @foreach (var category in Post.Categories)
                {
                    var categoryUrl = $"{CategoryUrl}/{category.Name}";
                    <span><a href="@categoryUrl">@category.Name</a></span>
                }
            </div>
            <div>
                Tags:
                @foreach (var tag in Post.Tags)
                {
                    var tagUrl = $"{TagUrl}/{tag.Name}";
                    <span><a href="@tagUrl">@tag.Name</a></span>
                }
            </div>
            <div>Last Modified: @Post.LastModified.ToString("MMM d yyyy")</div>
        }
    </header>
    <section>
        @((MarkupString)Post.Content)
    </section>
</article>

@code {
     
    private User _user;
    
    [Parameter]
    public Post Post { get; set; }
    
    [Parameter]
    public string CategoryUrl { get; set; }
    
    [Parameter]
    public string DeleteUrl { get; set; }

    [Parameter]
    public string EditUrl { get; set; }

    [Parameter]
    public string TagUrl { get; set; }
    
    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() =>
        {
            _user = PageState.User;
        });
    }
}